{"version":3,"sources":["Firebase.js","Component Staff/Edit.js","Component Staff/View.js","Component Staff/Add.js","Component Staff/Test.js","App.js","serviceWorker.js","index.js"],"names":["FireDB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Edit","props","initialFildValue","firstname","lastname","email","address","salary","useState","values","setValues","location","state","curId","currentID","SetCurrentID","conTobj","currentOBJ","info","SetInfo","useEffect","onChangeAllInput","e","man","target","name","value","onSubmit","preventDefault","alert","child","set","err","console","log","className","htmlFor","type","id","onChange","role","View","ContactObject","setContactObject","on","snapshot","val","scope","Object","keys","map","ele","key","to","pathname","onClick","remove","HandelDelete","Add","bind","onChangeSubmit","this","setState","obj","addres","push","Component","Test","CurrentIdd","SetCurrentIdd","avg","numberOfEmployee","parseInt","calculate","length","App","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ff80e98.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\r\n\r\n\r\n var firebaseConfig = {\r\n    apiKey: \"AIzaSyBOpOJJzQkIH1nix4AgldNRzI7b5mASzWI\",\r\n    authDomain: \"reactcurd.firebaseapp.com\",\r\n    databaseURL: \"https://reactcurd.firebaseio.com\",\r\n    projectId: \"reactcurd\",\r\n    storageBucket: \"reactcurd.appspot.com\",\r\n    messagingSenderId: \"932666924141\",\r\n    appId: \"1:932666924141:web:82a944d4747c76672eb364\"\r\n  };\r\n  // Initialize Firebase\r\n  let FireDB = firebase.initializeApp(firebaseConfig);\r\n\r\n\r\n  export default FireDB.database().ref();","import React, {useState, useEffect} from \"react\";\r\nimport FireDB from \"../Firebase\";\r\n\r\nconst Edit = (props) => {\r\n\r\n\r\n    let initialFildValue = {\r\n        firstname : \"\",\r\n        lastname : \"\",\r\n        email : \"\",\r\n        address : \"\",\r\n        salary : \"\",\r\n        \r\n    }\r\n\r\n    \r\n let [values, setValues] = useState(initialFildValue);\r\n let [currentID, SetCurrentID] = useState(props.location.state.curId);\r\n let [currentOBJ, SetCurrentOBJ] = useState(props.location.state.conTobj);\r\n let [info, SetInfo] = useState(\"\");\r\n\r\n \r\n \r\n\r\n useEffect(() => {\r\n   if(currentID == \"\"){\r\n        setValues({\r\n             ...initialFildValue\r\n        })\r\n   }else {\r\n     setValues({\r\n          ...currentOBJ[currentID]\r\n     })\r\n     \r\n   }\r\n\r\n  }, [currentID, currentOBJ]);\r\n\r\n \r\n const onChangeAllInput = (e) => {\r\n\r\n   const man = e.target.name;\r\n   setValues({\r\n    ...values,\r\n    [man]: e.target.value\r\n});\r\n\r\n}\r\n\r\n\r\nconst onChangeSubmit = (e) => {\r\n    e.preventDefault();\r\n if(values.firstname !== \"\" && values.lastname !== \"\" && values.email !== \"\" && values.address !== \"\" && values.salary !== \"\") {\r\n\r\n  FireDB.child(\"Add/\" + currentID).set(values, err => {\r\n    if(err){\r\n      console.log(err)\r\n    }else {\r\n         SetCurrentID(\"\");\r\n        \r\n    }\r\n  });\r\n\r\n }else{\r\n  alert(\"fields cannot be empty!\");\r\n  SetInfo(\"fields cannot be empty! please fill in fields\");\r\n  \r\n  return null;\r\n }\r\n\r\n\r\n}\r\n\r\n\r\n    return (\r\n       <form onSubmit={onChangeSubmit}>\r\n       <div className=\"form-row\">\r\n         <div className=\"form-group col-md-6\">\r\n           <label htmlFor=\"name\">First name</label>\r\n           <input type=\"text\" className=\"form-control\" id=\"name\" name=\"firstname\" value={values.firstname}  onChange={onChangeAllInput} ></input>\r\n         </div>\r\n         <div className=\"form-group col-md-6\">\r\n           <label htmlFor=\"lastname\">Last name</label>\r\n           <input type=\"text\" className=\"form-control\" id=\"lastname\" name=\"lastname\" value={values.lastname}   onChange={onChangeAllInput}></input>\r\n         </div>\r\n\r\n        </div>\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"email\">Email address</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"email\" name=\"email\" value={values.email}   onChange={onChangeAllInput}></input>\r\n          </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"address\">Address</label>\r\n          <input type=\"text\" className=\"form-control\" id=\"address\" name=\"address\" value={values.address}  onChange={onChangeAllInput} ></input>\r\n        </div>\r\n     \r\n         <div className=\"form-row\">\r\n           <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"salary\">salary</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"salary\" name=\"salary\" value={values.salary}   onChange={onChangeAllInput}></input>\r\n          </div>\r\n        </div>\r\n     \r\n\r\n        </div>\r\n \r\n        <button type=\"submit\" className=\"btn btn-primary\" >Update</button>\r\n\r\n           <br />\r\n           <br />\r\n           \r\n           { \r\n       \r\n           <div className={info == \"\" ? \"v\" : \"alert alert-danger\"} role=\"alert\">{info}</div>\r\n\r\n           }            \r\n      </form>\r\n     )\r\n\r\n\r\n}\r\n\r\nexport default Edit;","import React, {useState, useEffect} from \"react\";\r\nimport {Route, Link} from \"react-router-dom\";\r\nimport FireDB from \"../Firebase\";\r\nimport Edit from \"./Edit\";\r\n\r\n\r\nconst View = (props) => {\r\n\r\nlet [ContactObject, setContactObject] = useState({});\r\n\r\nlet [CurrentId, SetCurrentId] = useState(\";\")\r\n\r\nuseEffect(() => {\r\n\r\n     FireDB.child(\"Add\").on(\"value\", snapshot => {\r\n          if(snapshot.val() != null){\r\n\r\n               setContactObject({\r\n                  ...snapshot.val()\r\n             })\r\n          }else{\r\n               setContactObject({})\r\n          }\r\n     })\r\n}, []);\r\n\r\nconst HandelDelete = (ele) => {\r\n\r\n     FireDB.child(\"Add/\" + ele).remove( err => {\r\n          if(err){\r\n            console.log(err)\r\n          }else {\r\n              \r\n              \r\n          }\r\n        });\r\n}\r\n\r\n     return (\r\n <table className=\"table table-striped\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">First name</th>\r\n      <th scope=\"col\">Last name</th>\r\n      <th scope=\"col\">Email address</th>\r\n      <th scope=\"col\">Address</th>\r\n      <th scope=\"col\">Salary</th>\r\n      <th scope=\"col\">Action</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n       {\r\n            Object.keys(ContactObject).map(ele => {\r\n\r\n                return (\r\n                    <tr key={ele}>\r\n                    <th scope=\"row\"> {ContactObject[ele].firstname} </th>\r\n                    <td>{ContactObject[ele].lastname}</td>\r\n                    <td>{ContactObject[ele].email}</td>\r\n                    <td>{ContactObject[ele].address}</td>\r\n                    <td>{ContactObject[ele].salary}</td>\r\n                    <td>\r\n                    \r\n                    <button type=\"button\" className=\"btn btn-outline-warning\" ><Link  to={{\r\n  pathname: '/edit',\r\n  state: {\r\n    \r\n    curId: ele,\r\n    conTobj: ContactObject\r\n\r\n  }\r\n}} >Edit</Link></button>\r\n                     &nbsp;\r\n                    <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => HandelDelete(ele)}>Delete</button>\r\n                   \r\n                    </td>\r\n                  </tr>\r\n                  )\r\n                \r\n            })\r\n       }\r\n\r\n\r\n  </tbody>\r\n</table>\r\n     )\r\n\r\n     \r\n}\r\n\r\nexport default View;","import React, {Component} from \"react\";\r\nimport FireDB from \"../Firebase\";\r\n\r\n\r\n\r\nclass Add extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.onChangeAllInput = this.onChangeAllInput.bind(this);\r\n    this.onChangeSubmit = this.onChangeSubmit.bind(this);\r\n     \r\n    this.state = {\r\n        firstname : \"\",\r\n        lastname : \"\",\r\n        email : \"\",\r\n        address : \"\",\r\n        salary : \"\",\r\n        info: \"\"\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nonChangeAllInput(e){\r\n   const man = e.target.name;\r\n   \r\n      this.setState({\r\n        [man]: e.target.value\r\n    })\r\n  \r\n}\r\n\r\n\r\n\r\n\r\nonChangeSubmit(e){\r\n    e.preventDefault();\r\n    const obj = {\r\n      firstname: this.state.firstname, \r\n      lastname: this.state.lastname,\r\n      email: this.state.email,\r\n      address: this.state.address,\r\n      salary: this.state.salary,\r\n  }\r\n  if(this.state.firstname !== \"\" && this.state.lastname !== \"\" && this.state.email !== \"\" && this.state.addres !== \"\" && this.state.salary !== \"\") {\r\n\r\n    FireDB.child(\"Add\").push(obj, err => {\r\n      if(err){\r\n        console.log(err)\r\n      }\r\n    });\r\n\r\n  }else {\r\n    alert(\"fields cannot be empty!\");\r\n    this.setState({\r\n      info: \"fields cannot be empty! please fill in fields \"\r\n    })\r\n    return null;\r\n  }\r\n\r\n    this.setState({\r\n      firstname : \"\",\r\n      lastname : \"\",\r\n      email : \"\",\r\n      address : \"\",\r\n      salary : \"\",\r\n  })\r\n\r\n \r\n\r\n  \r\n}\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n\r\nrender () {\r\n\r\n       return (\r\n        <form onSubmit={this.onChangeSubmit}>\r\n        <div className=\"form-row\">\r\n\r\n          <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"name\">First name</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"name\" name=\"firstname\" value={this.state.firstname} onChange={this.onChangeAllInput} ></input>\r\n          </div>\r\n\r\n          <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"lastname\">Last name</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"lastname\" name=\"lastname\" value={this.state.lastname} onChange={this.onChangeAllInput}></input>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"form-row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"email\">Email address</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"email\" name=\"email\"  value={this.state.email} onChange={this.onChangeAllInput}></input>\r\n          </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"address\">Address</label>\r\n          <input type=\"text\" className=\"form-control\" id=\"address\" name=\"address\" value={this.state.address} onChange={this.onChangeAllInput} ></input>\r\n        </div>\r\n     \r\n         <div className=\"form-row\">\r\n           <div className=\"form-group col-md-6\">\r\n            <label htmlFor=\"salary\">salary</label>\r\n            <input type=\"text\" className=\"form-control\" id=\"salary\" name=\"salary\"  value={this.state.salary} onChange={this.onChangeAllInput}></input>\r\n          </div>\r\n        </div>\r\n        </div>\r\n \r\n        <button type=\"submit\" className=\"btn btn-primary\" >Submit</button>\r\n        <br />\r\n        <br />\r\n        <br />\r\n         \r\n        \r\n        {\r\n          <div className={this.state.info == \"\" ? \"v\" : \"alert alert-danger\"} role=\"alert\">{this.state.info }</div>\r\n        }\r\n         \r\n      </form>\r\n      \r\n     \r\n\r\n     )\r\n}\r\n     \r\n}\r\n\r\nexport default Add;","import React, {useState, useEffect} from \"react\";\r\nimport FireDB from \"../Firebase\";\r\n\r\nfunction Test(){\r\n  \r\n let [CurrentIdd, SetCurrentIdd] = useState({})\r\n  useEffect(() => {\r\n  FireDB.child(\"Add\").on(\"value\", function(snapshot) { \r\n    SetCurrentIdd({...snapshot.val()});\r\n    //numberOfEmployee += snapshot.numChildren();\r\n})\r\n\r\n}, []);\r\n\r\n      let avg = 0;\r\n      let numberOfEmployee = [];\r\n      Object.keys(CurrentIdd).map(ele => {\r\n        avg += parseInt(CurrentIdd[ele].salary);\r\n        numberOfEmployee.push(CurrentIdd[ele].salary)\r\n      })\r\n    let calculate =  avg / numberOfEmployee.length;\r\n        \r\n\r\n    return (\r\n      <div>\r\n           <h4>average employee salary = {calculate}</h4>\r\n           <h4>total employee salaries = {avg}</h4>\r\n     </div>\r\n    )\r\n}\r\n\r\nexport default Test;","import React from 'react';\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Edit from \"./Component Staff/Edit\";\nimport View from \"./Component Staff/View\";\nimport Add from './Component Staff/Add';\nimport FireDB from \"./Firebase\";\nimport Test from \"./Component Staff/Test\";\nfunction App() {\n\n\n\n\n\n\n  return (\n    <Router>\n          <div className=\"container\">\n             \n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"#\">Employee Manager</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n     <span className=\"navbar-toggler-icon\"></span>\n    </button>\n\n   <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul className=\"navbar-nav mr-auto\">\n      <li className=\"nav-item\">\n        <Link to={\"/add\"} className=\"nav-link\">Add</Link>\n      </li>\n      <li className=\"nav-item\">\n        <Link to={\"/view\"} className=\"nav-link\">view</Link>\n      </li>\n      <li  className=\"nav-item\">\n        <Link  className=\"nav-link\">Edit</Link>\n      </li>\n\n    </ul>\n \n     </div>\n   </nav>\n   <br />\n   <Test />\n   <br />\n         <br />\n   <Switch>\n     <Route exact path=\"/add\" component={Add} ></Route>\n     <Route  path=\"/edit\" component={Edit} ></Route>\n     <Route  path=\"/view\" component={View} ></Route>\n   </Switch>\n\n </div>\n  \n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}